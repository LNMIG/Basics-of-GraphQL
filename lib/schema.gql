enum Level {
    junior
    middle
    advanced
}

union GlobalSearch = Course | Student | Monitor

type Query {
    "Devuelve todos los cursos"
    getCourses: [Course]
    "Devuelve un curso"
    getCourse(id: ID!): Course
    "Devuelve todas las personas"
    getPeople: [Person]
    "Devuelve una persona"
    getPerson(id: ID!): Person
    "Busca por palabra o texto dado"
    searchItems(keyword: String!): [GlobalSearch]
}

type Course {
    _id: ID!
    title: String!
    teacher: String
    description: String!
    topic: String
    people: [Student]
}

interface Person {
    _id: ID!
    name: String!
    email: String!
}

type Student implements Person {
    _id: ID!
    name: String!
    email: String!
    avatar: String
}

type Monitor implements Person {
    _id: ID!
    name: String!
    email: String!
    phone: String
}

type Mutation {
    createCourse(input: CourseInput!): Course
    createPerson(input: PersonInput!): Person
    editCourse(id: ID!, input: CourseEditInput): Course
    editPerson(id: ID!, input: PersonEditInput): Person
    removeStudent(id: ID!): [Student]
    addPeople(courseId: ID!, personId: ID!): Course
}

input CourseInput {
    title: String!
    teacher: String
    description: String!
    topic: String
}
input PersonInput {
    name: String!
    email: String!
    avatar: String
    phone: String
}
input CourseEditInput {
    title: String
    teacher: String
    description: String
    topic: String
}
input PersonEditInput {
    name: String
    email: String
    avatar: String
    phone: String
}